"use strict";(self.webpackChunkrust_lang_zh_cn=self.webpackChunkrust_lang_zh_cn||[]).push([[636],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),g=a,m=p["".concat(s,".").concat(g)]||p[g]||d[g]||r;return n?o.createElement(m,i(i({ref:t},u),{},{components:n})):o.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5318:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const r={},i="\u4f60\u597d\uff0ccargo\uff01",l={unversionedId:"ch01/ch01-03-hello-cargo",id:"ch01/ch01-03-hello-cargo",title:"\u4f60\u597d\uff0ccargo\uff01",description:"Cargo is Rust\u2019s build system and package manager. Most Rustaceans use this tool",source:"@site/docs/ch01/ch01-03-hello-cargo.md",sourceDirName:"ch01",slug:"/ch01/ch01-03-hello-cargo",permalink:"/blog/rust-lang-zh-cn/docs/ch01/ch01-03-hello-cargo",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u4f60\u597d\uff0c\u4e16\u754c\uff01",permalink:"/blog/rust-lang-zh-cn/docs/ch01/ch01-02-hello-world"},next:{title:"appendix-04-useful-development-tools",permalink:"/blog/rust-lang-zh-cn/docs/appendix/appendix-04-useful-development-tools"}},s={},c=[{value:"Creating a Project with Cargo",id:"creating-a-project-with-cargo",level:3},{value:"Building and Running a Cargo Project",id:"building-and-running-a-cargo-project",level:3},{value:"Building for Release",id:"building-for-release",level:3},{value:"Cargo as Convention",id:"cargo-as-convention",level:3},{value:"Summary",id:"summary",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u4f60\u597dcargo"},"\u4f60\u597d\uff0ccargo\uff01"),(0,a.kt)("p",null,"Cargo is Rust\u2019s build system and package manager. Most Rustaceans use this tool\nto manage their Rust projects because Cargo handles a lot of tasks for you,\nsuch as building your code, downloading the libraries your code depends on, and\nbuilding those libraries. (We call the libraries that your code needs\n",(0,a.kt)("em",{parentName:"p"},"dependencies"),".)"),(0,a.kt)("p",null,"The simplest Rust programs, like the one we\u2019ve written so far, don\u2019t have any\ndependencies. If we had built the \u201cHello, world!\u201d project with Cargo, it would\nonly use the part of Cargo that handles building your code. As you write more\ncomplex Rust programs, you\u2019ll add dependencies, and if you start a project\nusing Cargo, adding dependencies will be much easier to do."),(0,a.kt)("p",null,"Because the vast majority of Rust projects use Cargo, the rest of this book\nassumes that you\u2019re using Cargo too. Cargo comes installed with Rust if you\nused the official installers discussed in the\n",(0,a.kt)("a",{parentName:"p",href:"ch01-01-installation#installation"},"\u201cInstallation\u201d")," section. If you installed Rust\nthrough some other means, check whether Cargo is installed by entering the\nfollowing in your terminal:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo --version\n")),(0,a.kt)("p",null,"If you see a version number, you have it! If you see an error, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"command\nnot found"),", look at the documentation for your method of installation to\ndetermine how to install Cargo separately."),(0,a.kt)("h3",{id:"creating-a-project-with-cargo"},"Creating a Project with Cargo"),(0,a.kt)("p",null,"Let\u2019s create a new project using Cargo and look at how it differs from our\noriginal \u201cHello, world!\u201d project. Navigate back to your ",(0,a.kt)("em",{parentName:"p"},"projects")," directory\n(or wherever you decided to store your code). Then, on any operating system,\nrun the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo new hello_cargo\n$ cd hello_cargo\n")),(0,a.kt)("p",null,"The first command creates a new directory and project called ",(0,a.kt)("em",{parentName:"p"},"hello_cargo"),".\nWe\u2019ve named our project ",(0,a.kt)("em",{parentName:"p"},"hello_cargo"),", and Cargo creates its files in a\ndirectory of the same name."),(0,a.kt)("p",null,"Go into the ",(0,a.kt)("em",{parentName:"p"},"hello_cargo")," directory and list the files. You\u2019ll see that Cargo\nhas generated two files and one directory for us: a ",(0,a.kt)("em",{parentName:"p"},"Cargo.toml")," file and a\n",(0,a.kt)("em",{parentName:"p"},"src")," directory with a ",(0,a.kt)("em",{parentName:"p"},"main.rs")," file inside."),(0,a.kt)("p",null,"It has also initialized a new Git repository along with a ",(0,a.kt)("em",{parentName:"p"},".gitignore")," file.\nGit files won\u2019t be generated if you run ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo new")," within an existing Git\nrepository; you can override this behavior by using ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo new --vcs=git"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: Git is a common version control system. You can change ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo new")," to\nuse a different version control system or no version control system by using\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"--vcs")," flag. Run ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo new --help")," to see the available options.")),(0,a.kt)("p",null,"Open ",(0,a.kt)("em",{parentName:"p"},"Cargo.toml")," in your text editor of choice. It should look similar to the\ncode in Listing 1-2."),(0,a.kt)("span",{class:"filename"},"Filename: Cargo.toml"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[package]\nname = "hello_cargo"\nversion = "0.1.0"\nedition = "2021"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\n')),(0,a.kt)("span",{class:"caption"},"Listing 1-2: Contents of *Cargo.toml* generated by `cargo new`"),(0,a.kt)("p",null,"This file is in the ",(0,a.kt)("a",{parentName:"p",href:"https://toml.io"},(0,a.kt)("em",{parentName:"a"},"TOML"))," (",(0,a.kt)("em",{parentName:"p"},"Tom\u2019s Obvious, Minimal\nLanguage"),") format, which is Cargo\u2019s configuration format."),(0,a.kt)("p",null,"The first line, ",(0,a.kt)("inlineCode",{parentName:"p"},"[package]"),", is a section heading that indicates that the\nfollowing statements are configuring a package. As we add more information to\nthis file, we\u2019ll add other sections."),(0,a.kt)("p",null,"The next three lines set the configuration information Cargo needs to compile\nyour program: the name, the version, and the edition of Rust to use. We\u2019ll talk\nabout the ",(0,a.kt)("inlineCode",{parentName:"p"},"edition")," key in ",(0,a.kt)("a",{parentName:"p",href:"/blog/rust-lang-zh-cn/docs/appendix/appendix-05-editions"},"Appendix E"),"."),(0,a.kt)("p",null,"The last line, ",(0,a.kt)("inlineCode",{parentName:"p"},"[dependencies]"),", is the start of a section for you to list any\nof your project\u2019s dependencies. In Rust, packages of code are referred to as\n",(0,a.kt)("em",{parentName:"p"},"crates"),". We won\u2019t need any other crates for this project, but we will in the\nfirst project in Chapter 2, so we\u2019ll use this dependencies section then."),(0,a.kt)("p",null,"Now open ",(0,a.kt)("em",{parentName:"p"},"src/main.rs")," and take a look:"),(0,a.kt)("span",{class:"filename"},"Filename: src/main.rs"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    println!("Hello, world!");\n}\n')),(0,a.kt)("p",null,"Cargo has generated a \u201cHello, world!\u201d program for you, just like the one we\nwrote in Listing 1-1! So far, the differences between our project and the\nproject Cargo generated are that Cargo placed the code in the ",(0,a.kt)("em",{parentName:"p"},"src")," directory\nand we have a ",(0,a.kt)("em",{parentName:"p"},"Cargo.toml")," configuration file in the top directory."),(0,a.kt)("p",null,"Cargo expects your source files to live inside the ",(0,a.kt)("em",{parentName:"p"},"src")," directory. The\ntop-level project directory is just for README files, license information,\nconfiguration files, and anything else not related to your code. Using Cargo\nhelps you organize your projects. There\u2019s a place for everything, and\neverything is in its place."),(0,a.kt)("p",null,"If you started a project that doesn\u2019t use Cargo, as we did with the \u201cHello,\nworld!\u201d project, you can convert it to a project that does use Cargo. Move the\nproject code into the ",(0,a.kt)("em",{parentName:"p"},"src")," directory and create an appropriate ",(0,a.kt)("em",{parentName:"p"},"Cargo.toml"),"\nfile."),(0,a.kt)("h3",{id:"building-and-running-a-cargo-project"},"Building and Running a Cargo Project"),(0,a.kt)("p",null,"Now let\u2019s look at what\u2019s different when we build and run the \u201cHello, world!\u201d\nprogram with Cargo! From your ",(0,a.kt)("em",{parentName:"p"},"hello_cargo")," directory, build your project by\nentering the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo build\n   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.85 secs\n")),(0,a.kt)("p",null,"This command creates an executable file in ",(0,a.kt)("em",{parentName:"p"},"target/debug/hello_cargo")," (or\n",(0,a.kt)("em",{parentName:"p"},"target\\debug\\hello_cargo.exe")," on Windows) rather than in your current\ndirectory. Because the default build is a debug build, Cargo puts the binary in\na directory named ",(0,a.kt)("em",{parentName:"p"},"debug"),". You can run the executable with this command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ ./target/debug/hello_cargo # or .\\target\\debug\\hello_cargo.exe on Windows\nHello, world!\n")),(0,a.kt)("p",null,"If all goes well, ",(0,a.kt)("inlineCode",{parentName:"p"},"Hello, world!")," should print to the terminal. Running ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo\nbuild")," for the first time also causes Cargo to create a new file at the top\nlevel: ",(0,a.kt)("em",{parentName:"p"},"Cargo.lock"),". This file keeps track of the exact versions of\ndependencies in your project. This project doesn\u2019t have dependencies, so the\nfile is a bit sparse. You won\u2019t ever need to change this file manually; Cargo\nmanages its contents for you."),(0,a.kt)("p",null,"We just built a project with ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo build")," and ran it with\n",(0,a.kt)("inlineCode",{parentName:"p"},"./target/debug/hello_cargo"),", but we can also use ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo run")," to compile the\ncode and then run the resultant executable all in one command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/hello_cargo`\nHello, world!\n")),(0,a.kt)("p",null,"Using ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo run")," is more convenient than having to remember to run ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo\nbuild")," and then use the whole path to the binary, so most developers use ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo\nrun"),"."),(0,a.kt)("p",null,"Notice that this time we didn\u2019t see output indicating that Cargo was compiling\n",(0,a.kt)("inlineCode",{parentName:"p"},"hello_cargo"),". Cargo figured out that the files hadn\u2019t changed, so it didn\u2019t\nrebuild but just ran the binary. If you had modified your source code, Cargo\nwould have rebuilt the project before running it, and you would have seen this\noutput:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo run\n   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.33 secs\n     Running `target/debug/hello_cargo`\nHello, world!\n")),(0,a.kt)("p",null,"Cargo also provides a command called ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo check"),". This command quickly checks\nyour code to make sure it compiles but doesn\u2019t produce an executable:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo check\n   Checking hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32 secs\n")),(0,a.kt)("p",null,"Why would you not want an executable? Often, ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo check")," is much faster than\n",(0,a.kt)("inlineCode",{parentName:"p"},"cargo build")," because it skips the step of producing an executable. If you\u2019re\ncontinually checking your work while writing the code, using ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo check")," will\nspeed up the process of letting you know if your project is still compiling! As\nsuch, many Rustaceans run ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo check")," periodically as they write their\nprogram to make sure it compiles. Then they run ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo build")," when they\u2019re\nready to use the executable."),(0,a.kt)("p",null,"Let\u2019s recap what we\u2019ve learned so far about Cargo:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We can create a project using ",(0,a.kt)("inlineCode",{parentName:"li"},"cargo new"),"."),(0,a.kt)("li",{parentName:"ul"},"We can build a project using ",(0,a.kt)("inlineCode",{parentName:"li"},"cargo build"),"."),(0,a.kt)("li",{parentName:"ul"},"We can build and run a project in one step using ",(0,a.kt)("inlineCode",{parentName:"li"},"cargo run"),"."),(0,a.kt)("li",{parentName:"ul"},"We can build a project without producing a binary to check for errors using\n",(0,a.kt)("inlineCode",{parentName:"li"},"cargo check"),"."),(0,a.kt)("li",{parentName:"ul"},"Instead of saving the result of the build in the same directory as our code,\nCargo stores it in the ",(0,a.kt)("em",{parentName:"li"},"target/debug")," directory.")),(0,a.kt)("p",null,"An additional advantage of using Cargo is that the commands are the same no\nmatter which operating system you\u2019re working on. So, at this point, we\u2019ll no\nlonger provide specific instructions for Linux and macOS versus Windows."),(0,a.kt)("h3",{id:"building-for-release"},"Building for Release"),(0,a.kt)("p",null,"When your project is finally ready for release, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo build\n--release")," to compile it with optimizations. This command will create an\nexecutable in ",(0,a.kt)("em",{parentName:"p"},"target/release")," instead of ",(0,a.kt)("em",{parentName:"p"},"target/debug"),". The optimizations\nmake your Rust code run faster, but turning them on lengthens the time it takes\nfor your program to compile. This is why there are two different profiles: one\nfor development, when you want to rebuild quickly and often, and another for\nbuilding the final program you\u2019ll give to a user that won\u2019t be rebuilt\nrepeatedly and that will run as fast as possible. If you\u2019re benchmarking your\ncode\u2019s running time, be sure to run ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo build --release")," and benchmark with\nthe executable in ",(0,a.kt)("em",{parentName:"p"},"target/release"),"."),(0,a.kt)("h3",{id:"cargo-as-convention"},"Cargo as Convention"),(0,a.kt)("p",null,"With simple projects, Cargo doesn\u2019t provide a lot of value over just using\n",(0,a.kt)("inlineCode",{parentName:"p"},"rustc"),", but it will prove its worth as your programs become more intricate.\nOnce programs grow to multiple files or need a dependency, it\u2019s much easier to\nlet Cargo coordinate the build."),(0,a.kt)("p",null,"Even though the ",(0,a.kt)("inlineCode",{parentName:"p"},"hello_cargo")," project is simple, it now uses much of the real\ntooling you\u2019ll use in the rest of your Rust career. In fact, to work on any\nexisting projects, you can use the following commands to check out the code\nusing Git, change to that project\u2019s directory, and build:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ git clone example.org/someproject\n$ cd someproject\n$ cargo build\n")),(0,a.kt)("p",null,"For more information about Cargo, check out ",(0,a.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/cargo/"},"its documentation"),"."),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"You\u2019re already off to a great start on your Rust journey! In this chapter,\nyou\u2019ve learned how to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Install the latest stable version of Rust using ",(0,a.kt)("inlineCode",{parentName:"li"},"rustup")),(0,a.kt)("li",{parentName:"ul"},"Update to a newer Rust version"),(0,a.kt)("li",{parentName:"ul"},"Open locally installed documentation"),(0,a.kt)("li",{parentName:"ul"},"Write and run a \u201cHello, world!\u201d program using ",(0,a.kt)("inlineCode",{parentName:"li"},"rustc")," directly"),(0,a.kt)("li",{parentName:"ul"},"Create and run a new project using the conventions of Cargo")),(0,a.kt)("p",null,"This is a great time to build a more substantial program to get used to reading\nand writing Rust code. So, in Chapter 2, we\u2019ll build a guessing game program.\nIf you would rather start by learning how common programming concepts work in\nRust, see Chapter 3 and then return to Chapter 2."))}d.isMDXComponent=!0}}]);