"use strict";(self.webpackChunkrust_lang_zh_cn=self.webpackChunkrust_lang_zh_cn||[]).push([[83],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(t),d=r,h=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return t?a.createElement(h,l(l({ref:n},u),{},{components:t})):a.createElement(h,l({ref:n},u))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[m]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5656:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={},l=void 0,i={unversionedId:"ch01/ch01-02-hello-world",id:"ch01/ch01-02-hello-world",title:"ch01-02-hello-world",description:"\u4f60\u597d\uff0c\u4e16\u754c\uff01",source:"@site/docs/ch01/ch01-02-hello-world.md",sourceDirName:"ch01",slug:"/ch01/ch01-02-hello-world",permalink:"/blog/rust-lang-zh-cn/docs/ch01/ch01-02-hello-world",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u5b89\u88c5",permalink:"/blog/rust-lang-zh-cn/docs/ch01/ch01-01-installation"},next:{title:"ch01-03-hello-cargo",permalink:"/blog/rust-lang-zh-cn/docs/ch01/ch01-03-hello-cargo"}},s={},p=[{value:"\u4f60\u597d\uff0c\u4e16\u754c\uff01",id:"\u4f60\u597d\u4e16\u754c",level:2},{value:"Creating a Project Directory",id:"creating-a-project-directory",level:3},{value:"Writing and Running a Rust Program",id:"writing-and-running-a-rust-program",level:3},{value:"Anatomy of a Rust Program",id:"anatomy-of-a-rust-program",level:3},{value:"Compiling and Running Are Separate Steps",id:"compiling-and-running-are-separate-steps",level:3}],u={toc:p},m="wrapper";function c(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"\u4f60\u597d\u4e16\u754c"},"\u4f60\u597d\uff0c\u4e16\u754c\uff01"),(0,r.kt)("p",null,"Now that you\u2019ve installed Rust, it\u2019s time to write your first Rust program.\nIt\u2019s traditional when learning a new language to write a little program that\nprints the text ",(0,r.kt)("inlineCode",{parentName:"p"},"Hello, world!")," to the screen, so we\u2019ll do the same here!"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: This book assumes basic familiarity with the command line. Rust makes\nno specific demands about your editing or tooling or where your code lives, so\nif you prefer to use an integrated development environment (IDE) instead of\nthe command line, feel free to use your favorite IDE. Many IDEs now have some\ndegree of Rust support; check the IDE\u2019s documentation for details. The Rust\nteam has been focusing on enabling great IDE support via ",(0,r.kt)("inlineCode",{parentName:"p"},"rust-analyzer"),". See\n",(0,r.kt)("a",{parentName:"p",href:"/blog/rust-lang-zh-cn/docs/appendix/appendix-04-useful-development-tools"},"Appendix D")," for more details.")),(0,r.kt)("h3",{id:"creating-a-project-directory"},"Creating a Project Directory"),(0,r.kt)("p",null,"You\u2019ll start by making a directory to store your Rust code. It doesn\u2019t matter\nto Rust where your code lives, but for the exercises and projects in this book,\nwe suggest making a ",(0,r.kt)("em",{parentName:"p"},"projects")," directory in your home directory and keeping all\nyour projects there."),(0,r.kt)("p",null,"Open a terminal and enter the following commands to make a ",(0,r.kt)("em",{parentName:"p"},"projects")," directory\nand a directory for the \u201cHello, world!\u201d project within the ",(0,r.kt)("em",{parentName:"p"},"projects")," directory."),(0,r.kt)("p",null,"For Linux, macOS, and PowerShell on Windows, enter this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ mkdir ~/projects\n$ cd ~/projects\n$ mkdir hello_world\n$ cd hello_world\n")),(0,r.kt)("p",null,"For Windows CMD, enter this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cmd"},'> mkdir "%USERPROFILE%\\projects"\n> cd /d "%USERPROFILE%\\projects"\n> mkdir hello_world\n> cd hello_world\n')),(0,r.kt)("h3",{id:"writing-and-running-a-rust-program"},"Writing and Running a Rust Program"),(0,r.kt)("p",null,"Next, make a new source file and call it ",(0,r.kt)("em",{parentName:"p"},"main.rs"),". Rust files always end with\nthe ",(0,r.kt)("em",{parentName:"p"},".rs")," extension. If you\u2019re using more than one word in your filename, the\nconvention is to use an underscore to separate them. For example, use\n",(0,r.kt)("em",{parentName:"p"},"hello_world.rs")," rather than ",(0,r.kt)("em",{parentName:"p"},"helloworld.rs"),"."),(0,r.kt)("p",null,"Now open the ",(0,r.kt)("em",{parentName:"p"},"main.rs")," file you just created and enter the code in Listing 1-1."),(0,r.kt)("span",{class:"filename"},"Filename: main.rs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    println!("Hello, world!");\n}\n')),(0,r.kt)("span",{class:"caption"},"Listing 1-1: A program that prints `Hello, world!`"),(0,r.kt)("p",null,"Save the file and go back to your terminal window in the\n",(0,r.kt)("em",{parentName:"p"},"~/projects/hello_world")," directory. On Linux or macOS, enter the following\ncommands to compile and run the file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ rustc main.rs\n$ ./main\nHello, world!\n")),(0,r.kt)("p",null,"On Windows, enter the command ",(0,r.kt)("inlineCode",{parentName:"p"},".\\main.exe")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"./main"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"> rustc main.rs\n> .\\main.exe\nHello, world!\n")),(0,r.kt)("p",null,"Regardless of your operating system, the string ",(0,r.kt)("inlineCode",{parentName:"p"},"Hello, world!")," should print to\nthe terminal. If you don\u2019t see this output, refer back to the\n",(0,r.kt)("a",{parentName:"p",href:"ch01-01-installation#troubleshooting"},"\u201cTroubleshooting\u201d")," part of the Installation\nsection for ways to get help."),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"Hello, world!")," did print, congratulations! You\u2019ve officially written a Rust\nprogram. That makes you a Rust programmer\u2014welcome!"),(0,r.kt)("h3",{id:"anatomy-of-a-rust-program"},"Anatomy of a Rust Program"),(0,r.kt)("p",null,"Let\u2019s review this \u201cHello, world!\u201d program in detail. Here\u2019s the first piece of\nthe puzzle:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn main() {\n\n}\n")),(0,r.kt)("p",null,"These lines define a function named ",(0,r.kt)("inlineCode",{parentName:"p"},"main"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," function is special: it\nis always the first code that runs in every executable Rust program. Here, the\nfirst line declares a function named ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," that has no parameters and returns\nnothing. If there were parameters, they would go inside the parentheses ",(0,r.kt)("inlineCode",{parentName:"p"},"()"),"."),(0,r.kt)("p",null,"The function body is wrapped in ",(0,r.kt)("inlineCode",{parentName:"p"},"{}"),". Rust requires curly brackets around all\nfunction bodies. It\u2019s good style to place the opening curly bracket on the same\nline as the function declaration, adding one space in between."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: If you want to stick to a standard style across Rust projects, you can\nuse an automatic formatter tool called ",(0,r.kt)("inlineCode",{parentName:"p"},"rustfmt")," to format your code in a\nparticular style (more on ",(0,r.kt)("inlineCode",{parentName:"p"},"rustfmt")," in\n",(0,r.kt)("a",{parentName:"p",href:"/blog/rust-lang-zh-cn/docs/appendix/appendix-04-useful-development-tools"},"Appendix D"),"). The Rust team has included this tool\nwith the standard Rust distribution, as ",(0,r.kt)("inlineCode",{parentName:"p"},"rustc")," is, so it should already be\ninstalled on your computer!")),(0,r.kt)("p",null,"The body of the ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," function holds the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'    println!("Hello, world!");\n')),(0,r.kt)("p",null,"This line does all the work in this little program: it prints text to the\nscreen. There are four important details to notice here."),(0,r.kt)("p",null,"First, Rust style is to indent with four spaces, not a tab."),(0,r.kt)("p",null,"Second, ",(0,r.kt)("inlineCode",{parentName:"p"},"println!")," calls a Rust macro. If it had called a function instead, it\nwould be entered as ",(0,r.kt)("inlineCode",{parentName:"p"},"println")," (without the ",(0,r.kt)("inlineCode",{parentName:"p"},"!"),"). We\u2019ll discuss Rust macros in\nmore detail in Chapter 19. For now, you just need to know that using a ",(0,r.kt)("inlineCode",{parentName:"p"},"!"),"\nmeans that you\u2019re calling a macro instead of a normal function and that macros\ndon\u2019t always follow the same rules as functions."),(0,r.kt)("p",null,"Third, you see the ",(0,r.kt)("inlineCode",{parentName:"p"},'"Hello, world!"')," string. We pass this string as an argument\nto ",(0,r.kt)("inlineCode",{parentName:"p"},"println!"),", and the string is printed to the screen."),(0,r.kt)("p",null,"Fourth, we end the line with a semicolon (",(0,r.kt)("inlineCode",{parentName:"p"},";"),"), which indicates that this\nexpression is over and the next one is ready to begin. Most lines of Rust code\nend with a semicolon."),(0,r.kt)("h3",{id:"compiling-and-running-are-separate-steps"},"Compiling and Running Are Separate Steps"),(0,r.kt)("p",null,"You\u2019ve just run a newly created program, so let\u2019s examine each step in the\nprocess."),(0,r.kt)("p",null,"Before running a Rust program, you must compile it using the Rust compiler by\nentering the ",(0,r.kt)("inlineCode",{parentName:"p"},"rustc")," command and passing it the name of your source file, like\nthis:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ rustc main.rs\n")),(0,r.kt)("p",null,"If you have a C or C++ background, you\u2019ll notice that this is similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"gcc"),"\nor ",(0,r.kt)("inlineCode",{parentName:"p"},"clang"),". After compiling successfully, Rust outputs a binary executable."),(0,r.kt)("p",null,"On Linux, macOS, and PowerShell on Windows, you can see the executable by\nentering the ",(0,r.kt)("inlineCode",{parentName:"p"},"ls")," command in your shell:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ ls\nmain  main.rs\n")),(0,r.kt)("p",null,"On Linux and macOS, you\u2019ll see two files. With PowerShell on Windows, you\u2019ll\nsee the same three files that you would see using CMD. With CMD on Windows, you\nwould enter the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cmd"},"> dir /B %= the /B option says to only show the file names =%\nmain.exe\nmain.pdb\nmain.rs\n")),(0,r.kt)("p",null,"This shows the source code file with the ",(0,r.kt)("em",{parentName:"p"},".rs")," extension, the executable file\n(",(0,r.kt)("em",{parentName:"p"},"main.exe")," on Windows, but ",(0,r.kt)("em",{parentName:"p"},"main")," on all other platforms), and, when using\nWindows, a file containing debugging information with the ",(0,r.kt)("em",{parentName:"p"},".pdb")," extension.\nFrom here, you run the ",(0,r.kt)("em",{parentName:"p"},"main")," or ",(0,r.kt)("em",{parentName:"p"},"main.exe")," file, like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ ./main # or .\\main.exe on Windows\n")),(0,r.kt)("p",null,"If your ",(0,r.kt)("em",{parentName:"p"},"main.rs")," is your \u201cHello, world!\u201d program, this line prints ",(0,r.kt)("inlineCode",{parentName:"p"},"Hello,\nworld!")," to your terminal."),(0,r.kt)("p",null,"If you\u2019re more familiar with a dynamic language, such as Ruby, Python, or\nJavaScript, you might not be used to compiling and running a program as\nseparate steps. Rust is an ",(0,r.kt)("em",{parentName:"p"},"ahead-of-time compiled")," language, meaning you can\ncompile a program and give the executable to someone else, and they can run it\neven without having Rust installed. If you give someone a ",(0,r.kt)("em",{parentName:"p"},".rb"),", ",(0,r.kt)("em",{parentName:"p"},".py"),", or\n",(0,r.kt)("em",{parentName:"p"},".js")," file, they need to have a Ruby, Python, or JavaScript implementation\ninstalled (respectively). But in those languages, you only need one command to\ncompile and run your program. Everything is a trade-off in language design."),(0,r.kt)("p",null,"Just compiling with ",(0,r.kt)("inlineCode",{parentName:"p"},"rustc")," is fine for simple programs, but as your project\ngrows, you\u2019ll want to manage all the options and make it easy to share your\ncode. Next, we\u2019ll introduce you to the Cargo tool, which will help you write\nreal-world Rust programs."))}c.isMDXComponent=!0}}]);